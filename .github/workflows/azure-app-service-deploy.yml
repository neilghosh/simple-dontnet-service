name: CI/CD Pipeline - Build, Test, and Deploy

# CI/CD Workflow:
# - Pull Requests:  CI only (build, restore, test) - No deployment
# - Push to main:   CI + CD (build, test, docker build/push, deploy) - Full pipeline
# - Manual trigger: CI + CD (same as push)
#
# Job Separation:
# - ci: Runs on all events (PR, push, manual) - builds and tests the application
# - cd: Runs only on push/workflow_dispatch - builds docker image and deploys to Azure
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Define deployment conditions once, reuse in jobs
env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: 'simple-dotnet-service'
  AZURE_RESOURCE_GROUP: 'simple-dotnet-service-rg'
  AZURE_CONTAINER_REGISTRY: 'simpledotnetregistry565.azurecr.io'
  REGISTRY_NAME: 'simpledotnetregistry565'
  IMAGE_NAME: 'simple-dotnet-service'
  IMAGE_TAG: ${{ github.sha }}
  DEPLOY_ON_EVENT: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}

jobs:
  # ============================================================================
  # CI: Continuous Integration - Build and Test
  # ============================================================================
  # Runs on: All events (PR, push, manual trigger)
  # Purpose: Verify code quality and test coverage
  # ============================================================================
  ci:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore NuGet dependencies
      run: dotnet restore simple-dotnet-service.sln
    
    - name: Build solution (Release)
      run: dotnet build simple-dotnet-service.sln --configuration Release --no-restore
    
    - name: Run unit and integration tests
      run: dotnet test simple-dotnet-service.sln --configuration Release --no-build --verbosity normal

  # ============================================================================
  # CD: Continuous Deployment - Build Docker Image and Deploy
  # ============================================================================
  # Runs on: Push to main or manual workflow_dispatch only
  # Depends on: ci job must pass
  # Purpose: Build docker image, push to ACR, and deploy to App Service
  # ============================================================================
  cd:
    name: Build Docker Image and Deploy to Azure
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # ========================================================================
    # Docker Build and Push to ACR
    # ========================================================================
    - name: Authenticate with Azure using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ env.REGISTRY_NAME }}
    
    - name: Build and push Docker image to ACR
      run: |
        docker build \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
    # ========================================================================
    # Deploy to App Service
    # ========================================================================
    - name: Configure App Service to use container image
      run: |
        az webapp config container set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --container-image-name ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          --container-registry-url https://${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: Ensure system-assigned managed identity for ACR access
      run: |
        az webapp identity assign \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --identities [system]
    
    - name: Restart App Service
      run: |
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    
    # ========================================================================
    # Deployment Verification (Smoke Test)
    # ========================================================================
    - name: Retrieve App Service URL
      id: app-url
      run: |
        WEBAPP_URL=$(az webapp show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --query defaultHostName -o tsv)
        echo "url=https://${WEBAPP_URL}" >> $GITHUB_OUTPUT
        echo "App Service URL: https://${WEBAPP_URL}"
    
    - name: Verify deployment - Test API endpoint
      run: |
        HEALTH_CHECK_URL="${{ steps.app-url.outputs.url }}/api/ip/outbound"
        echo "Testing: ${HEALTH_CHECK_URL}"
        
        # Retry logic: try up to 5 times with 10-second intervals
        for i in {1..5}; do
          echo "Attempt ${i}/5..."
          if curl --fail --silent --show-error "${HEALTH_CHECK_URL}" > /dev/null; then
            echo "✓ Deployment successful - API is responding"
            exit 0
          fi
          if [ $i -lt 5 ]; then
            echo "  Waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
        echo "✗ Deployment failed - API did not respond after 5 attempts"
        exit 1
