### Simple DotNet Service - HTTP Requests & Integration Tests
### Test endpoints for the Outbound IP API

@dev_HostAddress = http://localhost:5000
@docker_HostAddress = http://localhost:8080
@baseUrl = {{dev_HostAddress}}

### Get outbound IP address
GET {{baseUrl}}/api/ip/outbound
Accept: application/json

> {%
client.test("Status code is 200", function() {
  client.assert(response.status === 200, "Response status is not 200");
});

client.test("Response has Content-Type application/json", function() {
  client.assert(response.headers.valueOf("Content-Type").includes("application/json"), "Content-Type is not application/json");
});

client.test("Response body has outboundip property", function() {
  const jsonResponse = response.body;
  client.assert(jsonResponse.hasOwnProperty("outboundip"), "Response does not have outboundip property");
});

client.test("outboundip value is not empty", function() {
  const jsonResponse = response.body;
  client.assert(jsonResponse.outboundip && jsonResponse.outboundip.length > 0, "outboundip is empty");
});

client.test("outboundip is valid IP address format", function() {
  const jsonResponse = response.body;
  const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
  client.assert(ipRegex.test(jsonResponse.outboundip), "outboundip is not a valid IP format");
});

client.test("Response time is acceptable (less than 5 seconds)", function() {
  client.assert(response.responseTime < 5000, "Response time exceeds 5 seconds");
});
%}

###

### Weather Forecast endpoint
GET {{baseUrl}}/weatherforecast
Accept: application/json

> {%
client.test("Weather Forecast Status code is 200", function() {
  client.assert(response.status === 200, "Weather forecast response status is not 200");
});
%}

###

### Swagger/OpenAPI Documentation
GET {{baseUrl}}/swagger/index.html
Accept: text/html

> {%
client.test("Swagger UI is accessible", function() {
  client.assert(response.status === 200, "Swagger UI is not accessible");
});
%}

###

### Test using Docker environment (uncomment @baseUrl and run)
# @baseUrl = {{docker_HostAddress}}
# GET {{baseUrl}}/api/ip/outbound
# Accept: application/json
#
# > {%
# client.test("Docker: Status code is 200", function() {
#   client.assert(response.status === 200, "Docker response status is not 200");
# });
# 
# client.test("Docker: outboundip is valid IP format", function() {
#   const jsonResponse = response.body;
#   const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
#   client.assert(ipRegex.test(jsonResponse.outboundip), "Docker outboundip is not a valid IP format");
# });
# %}
